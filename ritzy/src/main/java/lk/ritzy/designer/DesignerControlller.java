package lk.ritzy.designer;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.ModelAndView;

import jakarta.transaction.Transactional;
import lk.ritzy.customer.Customer;
import lk.ritzy.customer.CustomerStatus;
import lk.ritzy.dresscatalog.Dress;
import lk.ritzy.employee.Employee;
import lk.ritzy.privlilege.PrivilegeController;
import lk.ritzy.user.User;
import lk.ritzy.user.UserDao;

import java.util.List;
import java.time.LocalDateTime;
import java.util.HashMap;



@RestController
public class DesignerControlller {

    @Autowired
    private DesignerDao dao;

    @Autowired
    private UserDao userDao;

    @Autowired
    private DesignerStatusDao designerStatusDao;

    @Autowired
    private PrivilegeController privilegeController;


    @RequestMapping(value = "/designer")
    public ModelAndView designerUI() {

        //get logged user authentication object
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();

        ModelAndView designerView = new ModelAndView();
        designerView.addObject("loggedusername", authentication.getName()); //loggedusername this connect in Tobnavbar.html to display username
        designerView.addObject("title", "Ritzy - Designer Management");
        designerView.addObject("Heading", "Designer Management");
        designerView.setViewName("Designer.html");
        return designerView;
    }


    // create mapping for get all designer data ------> URL[/Module/findall]
    @GetMapping(value = "/designer/findAll", produces = "application/json")
    public List<Designer> getAllData() {

        // get logged user authentication object
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();

        HashMap<String, Boolean> logUserPriv = privilegeController.getPrivilegeByUserModule(authentication.getName(),
                "DESIGNER");

        if (!logUserPriv.get("select")) {
            return null;
        }

        return dao.findAll(Sort.by(Direction.DESC, "id"));
    }

    // define post mapping for save designer record
    @PostMapping(value = "/designer")
    public String saveDesigner(@RequestBody Designer designer) {
        // authentication and authorization
        // get logged user authentication object
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();

        HashMap<String, Boolean> logUserPriv = privilegeController.getPrivilegeByUserModule(authentication.getName(),
                "DESIGNER");

        if (!logUserPriv.get("insert")) {
            return "Insert not Completed : You have no privilege..!";
        }

        // duplicate checking
        // check duplicate for email
        Designer extDesignerByEmail = dao.getByEmail(designer.getEmail());
        if (extDesignerByEmail != null) {
            return "Couldn't complete save : Given " + designer.getEmail() + "already exist...!";
        }

        try {
            // set autogenerated value

            

            // save designer
            
            User loggedUser = userDao.getUserbyUserName(authentication.getName());
            designer.setAdded_user(loggedUser.getAdded_user()); 

            // designer.setAdded_user(1); // automatically set it to added_user as mushfa who is id is 1
            designer.setAdded_datetime(LocalDateTime.now());// set automatically added data and time
            dao.save(designer); // save designer object(insert given designer --> run insert query)
            return "OK";
        } catch (Exception e) {
            // TODO: handle exception
            return "Submitting record failed...!\n" + e.getMessage();
        }
    }


    @PutMapping(value = "/designer")
    public String updateDesigner(@RequestBody Designer designer) {
        // Authentictio and autherization
        // get logged user authentication object
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();

        HashMap<String, Boolean> logUserPriv = privilegeController.getPrivilegeByUserModule(authentication.getName(),
                "DESIGNER");

        if (!logUserPriv.get("update")) {
            return "Update not Completed : You have no privilege..!";
        }

        // check existing and duplicate
        // get existing Designer object object getReferencebyid funtion---> used
        // Designer pK
        Designer existingDesigner = dao.getReferenceById(designer.getId());
        if (existingDesigner == null) {
            return "Update not Completed : Designer is not Exist....!";
        }

        Designer existingDesignerByEmail = dao.getByEmail(designer.getEmail());
        // get existing employee object by using frontend[employee.getId()] employee
        // object email value, then assign this to extEmployeeByEmail variable
        if (existingDesignerByEmail != null && existingDesignerByEmail.getId() != designer.getId()) {
            // return "Update not completed : change Email already exist"
            return "Update not completed : change " + designer.getEmail() + " is already exist";
        }

        Designer extDesignerByNic = dao.getBYNic(designer.getNic());
        // get existing designer object by using frontend[designer.getId()] designer
        // object nic value, then assign this to extDesignerByNic variable
        if (extDesignerByNic != null && extDesignerByNic.getId() != designer.getId()) {
            return "Update not completed : Change " + designer.getNic() + " already exist ";
        }

       

        try {
            // set auto generated value

            // operator
            existingDesigner.setUpdated_datetime(LocalDateTime.now());
            dao.save(designer);

            // dependancies

            return "OK";
        } catch (Exception e) {
            return "Update not Complete : " + e.getMessage();
        }
    }

    @Transactional //if there is any problem occured system can rollback and manages transactions
    @DeleteMapping(value = "/designer")
    public String deleteDesigner(@RequestBody Designer designer) {
        // authentication and autherization
        // get logged user authentication object
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();

        HashMap<String, Boolean> logUserPriv = privilegeController.getPrivilegeByUserModule(authentication.getName(),
                "DESIGNER");

        if (!logUserPriv.get("delete")) {
            return "Delete not Completed : You have no privilege..!";
        }

        // existing check
        Designer existingDesigner = dao.getReferenceById(designer.getId());
        if (existingDesigner == null) {
            return "Delete not complete : Customer Does not exist..!";
        }

        try {
            // operator

            // hard delete --> not recommended
            // dao.delete(designer); // use direct object
            // dao.delete(dao.getReferenceById(designer.getId())); // front end la irundha,
            // atha BE la check panni pathu primary key eduthu dlete pannum

            DesignerStatus deleteDesignerStatus = designerStatusDao.getReferenceById(2); // 2nd is belongs to 'In-Active' sataus
            existingDesigner.setDesigner_status_id(deleteDesignerStatus); // here status changes into deleted
            existingDesigner.setDeleted_datetime(LocalDateTime.now());
            dao.save(existingDesigner);


            return "OK";
        } catch (Exception e) {
            // TODO: handle exception
            return "Delete not completed : " + e.getMessage();
        }
    }

    
    @RequestMapping(value = "/designersview")
    public ModelAndView designerviewUI() {

        //get logged user authentication object
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();

        ModelAndView designerviewView = new ModelAndView();
        designerviewView.addObject("loggedusername", authentication.getName()); //loggedusername this connect in Tobnavbar.html to display username
        designerviewView.addObject("title", "Ritzy - Designer View");
        designerviewView.addObject("Heading", "Designer View");
        designerviewView.setViewName("DesignerView.html");
        return designerviewView;
    }

    //Dress available list for reservation module
    // @GetMapping(value = "/designersview/purchaserequest", produces = "application/json")
    // public List<Designer> getpendingPurchaseRequestsdesignerViewList(){
    //     // get logged user authentication object
    //     Authentication authentication = SecurityContextHolder.getContext().getAuthentication();

    //     HashMap<String, Boolean> logUserPriv = privilegeController.getPrivilegeByUserModule(authentication.getName(),
    //             "DESIGNER");

    //     if (!logUserPriv.get("select")) {
    //         return null;
    //     }

    //     return dao.pendingPurchaseRequestsdesignerViewList(); // this connects in designerdao
    // }


}
