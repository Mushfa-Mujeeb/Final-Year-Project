package lk.ritzy.reservation;


import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.ModelAndView;

import jakarta.transaction.Transactional;
import lk.ritzy.customer.Customer;
import lk.ritzy.dresscatalog.Dress;
import lk.ritzy.dresscatalog.DressAvailability;
import lk.ritzy.dresscatalog.DressCategory;
import lk.ritzy.privlilege.PrivilegeController;
import lk.ritzy.purchaserequest.PurchaseRequest;
import lk.ritzy.user.User;
import lk.ritzy.user.UserDao;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;

import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.List;
import java.math.BigDecimal;

@RestController
public class ReservationController {
    
    @Autowired
    private ReservationDao dao;

    @Autowired
    private ReservationStatusDao reservationStatusDao;

    @Autowired
    private UserDao userDao;

    @Autowired
    private PrivilegeController privilegeController;
    
    @RequestMapping(value = "/reservation")
    public ModelAndView reservationUI() { 

        //get logged user authentication object
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();

        ModelAndView reservationView = new ModelAndView();
        reservationView.addObject("loggedusername", authentication.getName()); //loggedusername this connect in Tobnavbar.html to display username
        reservationView.addObject("title", "Ritzy - Reservation Management");
        reservationView.addObject("Heading", "Reservation Management");
        reservationView.setViewName("Reservation.html");
        return reservationView;
    }

    // create mapping for get all customer data ------> URL[/Module/findall]
    @GetMapping(value = "/reservation/findAll", produces = "application/json")
    public List<Reservation> getAllData() {

        // get logged user authentication object
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();

        HashMap<String, Boolean> logUserPriv = privilegeController.getPrivilegeByUserModule(authentication.getName(),
                "RESERVATION");

        if (!logUserPriv.get("select")) {
            return null;
        }

        return dao.findAll(Sort.by(Direction.DESC, "id"));
    }

    // save reservation details
    @PostMapping(value = "/reservation")
    public String saveReservation(@RequestBody Reservation reservation) {

        // get logged user authentication object
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();

        HashMap<String, Boolean> logUserPriv = privilegeController.getPrivilegeByUserModule(authentication.getName(),
                "RESERVATION");

        if (!logUserPriv.get("insert")) {
            return "Insert not Completed : You have no privilege..!";
        }

                //duplicate check 
        try {
            // set autogenerated value
            String nextResvNumber = dao.getNextResvNumber();
            if (nextResvNumber.equals(null) || nextResvNumber.equals("nextResvNumber")) {
                reservation.setReservaton_no("00001");
            } else {
                reservation.setReservaton_no(nextResvNumber);
            }
            //set inner object
            for (ReservationHasDress reshasdress : reservation.getReservationHasDressList()) {
                reshasdress.setReservation_id(reservation);
                reshasdress.setDamaged_charge(BigDecimal.ZERO);
                reshasdress.setLate_returned_charge(BigDecimal.ZERO);
                reshasdress.setRefundable_amount(BigDecimal.ZERO);
            }

            //set dependancies


            User loggedUser = userDao.getUserbyUserName(authentication.getName());
            reservation.setAdded_user(loggedUser.getAdded_user()); 

            // reservation.setAdded_user(1); // automatically set it to added_user as mushfa who is id is 1
            reservation.setAdded_datetime(LocalDateTime.now()); // set automatically added data and time
            dao.save(reservation);
            return "OK";
        } catch (Exception e) {
            // TODO: handle exception
            return "Failed to save reservation details...!\n" + e.getMessage();
        }
    }

    @PutMapping(value = "/reservation")
    public String updateReservation(@RequestBody Reservation reservation) {
       
        // check logged user Authentiction and autherization
        // get logged user authentication object
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();

        HashMap<String, Boolean> logUserPriv = privilegeController.getPrivilegeByUserModule(authentication.getName(),
                "RESERVATION");

        if (!logUserPriv.get("update")) {
            return "Update not Completed : You have no privilege..!";
        }


        // check existing and duplicate
        // get existing employee object object getReferencebyid funtion---> used
        // employee pK
        Reservation existingReservation = dao.getReferenceById(reservation.getId());
        if (existingReservation == null) {
            return "Update not Completed : Reservation is not Exist....!";
        }

       

        try {

            
            //set updated user
            User loggedUser = userDao.getUserbyUserName(authentication.getName());
            reservation.setUpdated_user(loggedUser.getUpdated_user());
            // set auto generated value

            // operator
            reservation.setUpdated_datetime(LocalDateTime.now());
            
            //set inner object
            for (ReservationHasDress reshasdress : reservation.getReservationHasDressList()) {
                reshasdress.setReservation_id(reservation);
            }
            dao.save(reservation);

            // dependancies

            return "OK";
        } catch (Exception e) {
            return "Update not Complete : " + e.getMessage();
        }
    }

    @Transactional //if there is any problem occured system can rollback and manages transactions
    @DeleteMapping(value = "/reservation")
    public String deleteReservation(@RequestBody Reservation reservation) {
        // authentication and autherization
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();

        HashMap<String, Boolean> logUserPriv = privilegeController.getPrivilegeByUserModule(authentication.getName(),
                "RESERVATION");

        if (!logUserPriv.get("delete")) {
            return "Delete not Completed : You have no privilege..!";
        }


        // existing check        
        Reservation existingReservation = dao.getReferenceById(reservation.getId());
        if (existingReservation == null) {
            return "Delete not Completed : Reservation does not Exist....!";
        }

        try {
            // operator

            // hard delete --> not recommended
            // dao.delete(employee); // use direct object
            // dao.delete(dao.getReferenceById(employee.getId())); // front end la irundha,
            // atha BE la check panni pathu primary key eduthu dlete pannum

                        //set inner object
                        for (ReservationHasDress reshasdress : existingReservation.getReservationHasDressList()) {
                            reshasdress.setReservation_id(existingReservation);
                            reshasdress.setRental_status("Cancelled");
                            
                        }
            
            ReservationStatus reservationStatus = reservationStatusDao.getReferenceById(5); // 5th id belongs to 'cancelled' sataus
            existingReservation.setReservation_status_id(reservationStatus);; // here status changes into cancelled
            existingReservation.setDeleted_datetime(LocalDateTime.now());
            dao.save(existingReservation);


            // DressAvailability deleteavailability = dressavaildao.getReferenceById(4); // 4th id belongs to 'out of stock' sataus
            // existingDress.setDressavailability_id(deleteavailability); // here status changes into out of stock
            // existingDress.setDeleted_datetime(LocalDateTime.now());
            // dao.save(existingDress);


            return "OK";
        } catch (Exception e) {
            // TODO: handle exception
            return "Delete not completed : " + e.getMessage();
        }
    }


    // create mapping for get all reservation byresstatus ------> URL[/Module/findall]
    @GetMapping(value = "/reservation/byresstatus", produces = "application/json")
    public List<Reservation> getByresstatusData() {

        // get logged user authentication object
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();

        HashMap<String, Boolean> logUserPriv = privilegeController.getPrivilegeByUserModule(authentication.getName(),
                "RESERVATION");

        if (!logUserPriv.get("select")) {
            return null;
        }

        return dao.byresStatus();
    }


    // create mapping for get all reservation byresstatusforreturn ------> URL[/Module/findall]
    @GetMapping(value = "/reservation/byresstatusforreturn", produces = "application/json")
    public List<Reservation> getByresstatusForReturnData() {

        // get logged user authentication object
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();

        HashMap<String, Boolean> logUserPriv = privilegeController.getPrivilegeByUserModule(authentication.getName(),
                "RESERVATION");

        if (!logUserPriv.get("select")) {
            return null;
        }

        return dao.byresStatusForReturn();
    }

    // create mapping for get all reservation bypayforreservation ------> URL[/Module/findall]
    @GetMapping(value = "/reservation/bypayforreservation", produces = "application/json")
    public List<Reservation> getBypayforreservationData() {

        // get logged user authentication object
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();

        HashMap<String, Boolean> logUserPriv = privilegeController.getPrivilegeByUserModule(authentication.getName(),
                "RESERVATION");

        if (!logUserPriv.get("select")) {
            return null;
        }

        return dao.bypayforReservation();
    }


    
}
