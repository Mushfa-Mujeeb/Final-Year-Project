package lk.ritzy.customer;

import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.ModelAndView;

import jakarta.transaction.Transactional;

import lk.ritzy.privlilege.PrivilegeController;
import lk.ritzy.user.User;
import lk.ritzy.user.UserDao;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;

import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.List;

@RestController
public class CustomerController {

    @Autowired
    private CustomerDao dao;

    @Autowired
    private CustomerStatusDao custStatusdao;

    @Autowired
    private UserDao userDao;

    @Autowired
    private PrivilegeController privilegeController;

    @RequestMapping(value = "/customer")
    public ModelAndView customerUI() {

        //get logged user authentication object
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();

        ModelAndView customerView = new ModelAndView();
        customerView.addObject("loggedusername", authentication.getName()); //loggedusername this connect in Tobnavbar.html to display username
        customerView.addObject("title", "Ritzy - Customer Management");
        customerView.addObject("Heading", "Customer Management");
        customerView.setViewName("Customer.html");
        return customerView;
    }


    // create mapping for get all customer data ------> URL[/Module/findall]
    @GetMapping(value = "/customer/findAll", produces = "application/json")
    public List<Customer> getAllData() {

        // get logged user authentication object
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();

        HashMap<String, Boolean> logUserPriv = privilegeController.getPrivilegeByUserModule(authentication.getName(),
                "CUSTOMER");

        if (!logUserPriv.get("select")) {
            return null;
        }

        return dao.findAll(Sort.by(Direction.DESC, "id"));
    }

    // define post mapping for save Customer record
    @PostMapping(value = "/customer")
    public String saveCustomer(@RequestBody Customer customer) {
        // authentication and authorization
        // get logged user authentication object
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();

        HashMap<String, Boolean> logUserPriv = privilegeController.getPrivilegeByUserModule(authentication.getName(),
                "CUSTOMER");

        if (!logUserPriv.get("insert")) {
            return "Insert not Completed : You have no privilege..!";
        }

        // duplicate checking
        // check duplicate for email
        Customer extCustomerByEmail = dao.getByEmail(customer.getEmail());
        if (extCustomerByEmail != null) {
            return "Couldn't complete save : Given " + customer.getEmail() + "already exist...!";
        }

        Customer extCustomerByNic = dao.getByNic(customer.getNic());
        if (extCustomerByNic != null) {
            return "Couldn't complete save : Given " + customer.getNic() + "already exist...!";
        }

        try {
            // set autogenerated value

            

            // save employee
            
            User loggedUser = userDao.getUserbyUserName(authentication.getName());
            customer.setAdded_user(loggedUser.getAdded_user()); 

            // customer.setAdded_user(1); // automatically set it to added_user as mushfa who is id is 1
            customer.setAdded_datetime(LocalDateTime.now());// set automatically added data and time
            dao.save(customer); // save employee object(insert given employee --> run insert query)
            return "OK";
        } catch (Exception e) {
            // TODO: handle exception
            return "Submitting record failed...!\n" + e.getMessage();
        }
    }

    @PutMapping(value = "/customer")
    public String updateEmployee(@RequestBody Customer customer) {
        // Authentictio and autherization
        // get logged user authentication object
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();

        HashMap<String, Boolean> logUserPriv = privilegeController.getPrivilegeByUserModule(authentication.getName(),
                "CUSTOMER");

        if (!logUserPriv.get("update")) {
            return "Update not Completed : You have no privilege..!";
        }

        // check existing and duplicate
        // get existing customer object object getReferencebyid funtion---> used
        // customer pK
        Customer existingCustomer = dao.getReferenceById(customer.getId());
        if (existingCustomer == null) {
            return "Update not Completed : Customer is not Exist....!";
        }

        Customer existingCustomerByEmail = dao.getByEmail(customer.getEmail());
        // get existing Customer object by using frontend[Customer.getId()] employee
        // object email value, then assign this to extCustomerByEmail variable
        if (existingCustomerByEmail != null && existingCustomerByEmail.getId() != customer.getId()) {
            // return "Update not completed : change Email already exist"
            return "Update not completed : change " + customer.getEmail() + " is already exist";
        }

       

        try {
            // set auto generated value

            // operator
            existingCustomer.setUpdated_datetime(LocalDateTime.now());
            dao.save(customer);

            // dependancies

            return "OK";
        } catch (Exception e) {
            return "Update not Complete : " + e.getMessage();
        }
    }



    @Transactional //if there is any problem occured system can rollback and manages transactions
    @DeleteMapping(value = "/customer")
    public String deleteCustomer(@RequestBody Customer customer) {
        // authentication and autherization
        // get logged user authentication object
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();

        HashMap<String, Boolean> logUserPriv = privilegeController.getPrivilegeByUserModule(authentication.getName(),
                "CUSTOMER");

        if (!logUserPriv.get("delete")) {
            return "Delete not Completed : You have no privilege..!";
        }

        // existing check
        Customer existingCustomer = dao.getReferenceById(customer.getId());
        if (existingCustomer == null) {
            return "Delete not complete : Customer Does not exist..!";
        }

        try {
            // operator

            // hard delete --> not recommended
            // dao.delete(customer); // use direct object
            // dao.delete(dao.getReferenceById(customer.getId())); // front end la irundha,
            // atha BE la check panni pathu primary key eduthu dlete pannum

            CustomerStatus deleteCustStatus = custStatusdao.getReferenceById(2); // 2nd is belongs to 'In-Active' sataus
            existingCustomer.setCustomerstatus_id(deleteCustStatus); // here status changes into deleted
            existingCustomer.setDeleted_datetime(LocalDateTime.now());
            dao.save(existingCustomer);


            return "OK";
        } catch (Exception e) {
            // TODO: handle exception
            return "Delete not completed : " + e.getMessage();
        }
    }


    
    // create mapping for get  customer to the reservation module 
    @GetMapping(value = "/customer/list", produces = "application/json")
    public List<Customer> getAllDataList() {

        // get logged user authentication object
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();

        HashMap<String, Boolean> logUserPriv = privilegeController.getPrivilegeByUserModule(authentication.getName(),
                "CUSTOMER");

        if (!logUserPriv.get("select")) {
            return null;
        }

        return dao.CustomerList(); //List connected in customerDao line 21
    }


    // create mapping for get  customer to the dress collected module 
    @GetMapping(value = "/customer/reservedlist", produces = "application/json")
    public List<Customer> getReservedDataList() {

        // get logged user authentication object
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();

        HashMap<String, Boolean> logUserPriv = privilegeController.getPrivilegeByUserModule(authentication.getName(),
                "CUSTOMER");

        if (!logUserPriv.get("select")) {
            return null;
        }

        return dao.CustomerReservedList(); //List connected in customerDao line 21
    }
}
