package lk.ritzy.payment;

import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.ModelAndView;

import lk.ritzy.employee.Employee;
import lk.ritzy.privlilege.PrivilegeController;
import lk.ritzy.reservation.Reservation;
import lk.ritzy.reservation.ReservationDao;
import lk.ritzy.reservation.ReservationHasDress;
import lk.ritzy.reservation.ReservationStatusDao;
import lk.ritzy.user.User;
import lk.ritzy.user.UserDao;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.List;

@RestController
public class PaymentController {

    @Autowired
    private UserDao userDao;

    @Autowired
    private ReservationDao reservationDao;

    @Autowired
    private ReservationStatusDao reservationStatusDao;

    @Autowired
    private PaymentDao dao;

    @Autowired
    private PrivilegeController privilegeController;

    @RequestMapping(value = "/payment")
    public ModelAndView paymentUI() {

        // get logged user authentication object
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();

        ModelAndView paymentView = new ModelAndView();
        paymentView.addObject("loggedusername", authentication.getName()); // loggedusername this connect in
                                                                           // Tobnavbar.html to display username
        paymentView.addObject("title", "Ritzy - Payment Management");
        paymentView.addObject("Heading", "Payment Management");
        paymentView.setViewName("Payment.html");
        return paymentView;
    }

    // create mapping for get all Payment data ------> URL[/Module/findall]
    @GetMapping(value = "/payment/findAll", produces = "application/json")
    public List<Payment> getAllData() {

        // get logged user authentication object
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();

        HashMap<String, Boolean> logUserPriv = privilegeController.getPrivilegeByUserModule(authentication.getName(),
                "PAYMENT");

        if (!logUserPriv.get("select")) {
            return null;
        }

        return dao.findAll(Sort.by(Direction.DESC, "id"));
    }

    // define post mapping for save employee record
    @PostMapping(value = "/payment")
    public String savePayment(@RequestBody Payment payment) {
        // authentication and authorization

        // get logged user authentication object
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();

        HashMap<String, Boolean> logUserPriv = privilegeController.getPrivilegeByUserModule(authentication.getName(),
                "PAYMENT");

        if (!logUserPriv.get("insert")) {
            return "Insert not Completed : You have no privilege..!";
        }

        try {
            // set autogenerated value

            // nextnumber
            String nextNumber = dao.getNextNumber();
            if ( nextNumber == null || nextNumber.equals(null) || nextNumber.equals("")) {
            payment.setInvoice_no("I202400001");
            } else {
            payment.setInvoice_no(nextNumber);
            }

          //  Reservation reservation = reservationDao.getReferenceById(payment.getReservation_id().getId());
            if (payment.getInvoice_type_id().getName().equals("Deposit Invoice")) {
              
                payment.setDeposit_payment_date(LocalDateTime.now());
                
            }
            if (payment.getInvoice_type_id().getName().equals("Dress Rental Invoice")) {
              
                payment.setRental_payment_date(LocalDateTime.now());
               
            }
            
            payment.setAdded_user(userDao.getUserbyUserName(authentication.getName()).getId()); // automatically set it
                                                                                                // to added_user as
                                                                                                // mushfa who is id is 1
            payment.setAdded_datetime(LocalDateTime.now());// set automatically added data and time
            Payment savedPayment = dao.save(payment); // save payment object(insert given payment --> run insert
                                                      // query)

            Reservation paidReservation = reservationDao.getReferenceById(savedPayment.getReservation_id().getId());

            if (savedPayment.getInvoice_type_id().getName().equals("Reservation Invoice")) {
                paidReservation.setReservation_status_id(reservationStatusDao.getReferenceById(2));

                for (ReservationHasDress rhdress : paidReservation.getReservationHasDressList()) {
                    rhdress.setReservation_id(paidReservation);
                    rhdress.setRental_status("Pre-Reserved");
                }
            }

            if (savedPayment.getInvoice_type_id().getName().equals("Deposit Invoice")) {
                paidReservation.setReservation_status_id(reservationStatusDao.getReferenceById(3));

                for (ReservationHasDress rhdress : paidReservation.getReservationHasDressList()) {
                    rhdress.setReservation_id(paidReservation);
                                       
                }
            }

            if (savedPayment.getInvoice_type_id().getName().equals("Dress Rental Invoice")) {
                int returnCount = 0;
                for (ReservationHasDress rhdress : paidReservation.getReservationHasDressList()) {
                    rhdress.setReservation_id(paidReservation);
                    if (rhdress.getRental_status().equals("Dress Returned")) {
                        returnCount = returnCount + 1;
                    }
                                       
                }

                if (returnCount == paidReservation.getReservationHasDressList().size()) {
                    paidReservation.setReservation_status_id(reservationStatusDao.getReferenceById(4));
                }
            }



            reservationDao.save(paidReservation);

            return "OK";
        } catch (Exception e) {
            // TODO: handle exception
            return "Submitting record failed...!\n" + e.getMessage();
        }
    }

}
