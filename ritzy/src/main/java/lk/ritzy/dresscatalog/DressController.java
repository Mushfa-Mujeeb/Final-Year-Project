package lk.ritzy.dresscatalog;

import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.ModelAndView;

import jakarta.transaction.Transactional;

import lk.ritzy.privlilege.PrivilegeController;
import lk.ritzy.user.User;
import lk.ritzy.user.UserDao;
import java.time.LocalDate;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;


import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.List;


@RestController
public class DressController {

    @Autowired
    private DressDao dao;

    @Autowired
    private DressAvailabilityDao dressavaildao;

    @Autowired
    private UserDao userdao;

    @Autowired
    private PrivilegeController privilegeController;

    @RequestMapping(value = "/dress")
    public ModelAndView dressUI() {

        //get logged user authentication object
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();

        ModelAndView dressView = new ModelAndView();
        dressView.addObject("loggedusername", authentication.getName()); //loggedusername this connect in Tobnavbar.html to display username
        dressView.addObject("title", "Ritzy - Dress Catalog");
        dressView.addObject("Heading", "Dress Catalog");
        dressView.setViewName("DressCatalog.html");
        return dressView;
    }

    @GetMapping(value = "/dress/findAll", produces = "application/json")
    public List<Dress> getAllData(){
        // get logged user authentication object
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();

        HashMap<String, Boolean> logUserPriv = privilegeController.getPrivilegeByUserModule(authentication.getName(),
                "DRESS_CATALOG");

        if (!logUserPriv.get("select")) {
            return null;
        }

        return dao.findAll(Sort.by(Direction.DESC, "id"));
    }
    
    
    // save dress details
    @PostMapping(value = "/dress")
    public String saveDress(@RequestBody Dress dress) {

        // get logged user authentication object
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();

        HashMap<String, Boolean> logUserPriv = privilegeController.getPrivilegeByUserModule(authentication.getName(),
                "DRESS_CATALOG");

        if (!logUserPriv.get("insert")) {
            return "Insert not Completed : You have no privilege..!";
        }

                //duplicate check is not necessory here
        try {
            // set autogenerated value

            // create next number variable to store next number in DB using calling
            // getNextNumber in Dao
            // employee.setEmpno("00000002"); // manual
            String nextNumber = dao.getNextNumber();
            if (nextNumber.equals(null) || nextNumber.equals("nextNumber")) {
                dress.setDress_code("001");
            } else {
                dress.setDress_code(nextNumber);
            }


            //set dependancies like inventory


            User loggedUser = userdao.getUserbyUserName(authentication.getName());
            dress.setAdded_user(loggedUser.getAdded_user()); 

            
            // dress.setAdded_user(1); // automatically set it to added_user as mushfa who is id is 1
            dress.setAdded_datetime(LocalDateTime.now()); // set automatically added data and time
            
            Dress newDress = dao.save(dress);
            return newDress.getDress_code();
        } catch (Exception e) {
            // TODO: handle exception
            return "Failed to save Dress details...!" + e.getMessage();
        }
    }

    @PutMapping(value = "/dress")
    public String updateDress(@RequestBody Dress dress) {
       
        // check logged user Authentiction and autherization
        // get logged user authentication object
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();

        HashMap<String, Boolean> logUserPriv = privilegeController.getPrivilegeByUserModule(authentication.getName(),
                "DRESS_CATALOG");

        if (!logUserPriv.get("update")) {
            return "Update not Completed : You have no privilege..!";
        }


        // check existing and duplicate
        // get existing employee object object getReferencebyid funtion---> used
        // employee pK
        Dress existingDress = dao.getReferenceById(dress.getId());
        if (existingDress == null) {
            return "Update not Completed : Dress is not Exist....!";
        }

       

        try {
            // set auto generated value

            // operator
            existingDress.setUpdated_datetime(LocalDateTime.now());
            dao.save(dress);

            // dependancies

            return "OK";
        } catch (Exception e) {
            return "Update not Complete : " + e.getMessage();
        }
    }

    @Transactional //if there is any problem occured system can rollback and manages transactions
    @DeleteMapping(value = "/dress")
    public String deleteDress(@RequestBody Dress dress) {
        // authentication and autherization
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();

        HashMap<String, Boolean> logUserPriv = privilegeController.getPrivilegeByUserModule(authentication.getName(),
                "DRESS_CATALOG");

        if (!logUserPriv.get("delete")) {
            return "Delete not Completed : You have no privilege..!";
        }


        // existing check        
        Dress existingDress = dao.getReferenceById(dress.getId());
        if (existingDress == null) {
            return "Delete not Completed : Dress does not Exist....!";
        }

        try {
            // operator

            // hard delete --> not recommended
            // dao.delete(employee); // use direct object
            // dao.delete(dao.getReferenceById(employee.getId())); // front end la irundha,
            // atha BE la check panni pathu primary key eduthu dlete pannum

            DressAvailability deleteavailability = dressavaildao.getReferenceById(4); // 4th id belongs to 'out of stock' sataus
            existingDress.setDressavailability_id(deleteavailability); // here status changes into out of stock
            existingDress.setDeleted_datetime(LocalDateTime.now());
            dao.save(existingDress);


            return "OK";
        } catch (Exception e) {
            // TODO: handle exception
            return "Delete not completed : " + e.getMessage();
        }
    }


    //Dress available list for reservation module
    @GetMapping(value = "/dress/availablelist", produces = "application/json")
    public List<Dress> getAvailableDresses(){
        // get logged user authentication object
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();

        HashMap<String, Boolean> logUserPriv = privilegeController.getPrivilegeByUserModule(authentication.getName(),
                "DRESS_CATALOG");

        if (!logUserPriv.get("select")) {
            return null;
        }

        return dao.getAvalaibleDressList(); // this connects in dressDao
    }


    //Dress available list for reservation module
    @GetMapping(value = "/dress/availablelistbyfded/{fd}/{ed}", produces = "application/json")
    public List<Dress> getAvailableDressesByFDED(@PathVariable("fd")String fittondate, @PathVariable("ed")String enddate){
        // get logged user authentication object
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();

        HashMap<String, Boolean> logUserPriv = privilegeController.getPrivilegeByUserModule(authentication.getName(),
                "DRESS_CATALOG");

        if (!logUserPriv.get("select")) {
            return null;
        }

        LocalDate fd = LocalDate.parse(fittondate);
        LocalDate ed = LocalDate.parse(enddate);

        return dao.getByRentalFDED(fd , ed); // this connects in dressDao
    }



}
